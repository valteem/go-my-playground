package reuse_test

import (
	"testing"

	"github.com/google/go-cmp/cmp"

	"github.com/valteem/reuse"
)

func TestCircularArrayRotation(t *testing.T) {

	tests := []struct {
		a       []int32
		k       int32
		queries []int32
		output  []int32
	}{
		{
			a:       []int32{5, 8, 7, 4},
			k:       1,
			queries: []int32{0, 1, 2, 3},
			output:  []int32{4, 5, 8, 7},
		},
		{
			a:       []int32{5, 8, 7, 4},
			k:       2,
			queries: []int32{0, 1, 2, 3},
			output:  []int32{7, 4, 5, 8},
		},
		{
			a:       []int32{5, 8, 7, 4},
			k:       4,
			queries: []int32{0, 1, 2, 3},
			output:  []int32{5, 8, 7, 4},
		},
	}

	for _, tc := range tests {
		output := reuse.CircularArrayRotation(tc.a, tc.k, tc.queries)
		if !cmp.Equal(output, tc.output) {
			t.Errorf("get %v, expect %v", output, tc.output)
		}
	}
}

func TestCircleDistribution(t *testing.T) {

	tests := []struct {
		n      int32
		m      int32
		s      int32
		output int32
	}{
		{5, 2, 1, 2},
		{4, 10, 1, 2},
		{11, 12, 10, 10},
		{3, 394274638, 3, 3},
		{7, 615562705, 2, 3},
		{2, 739424390, 2, 1},
		{654809340, 204894365, 472730208, 22815232},
		{12, 430895283, 10, 12},
		{820162082, 641616307, 588599124, 410053348},
		{11, 872829055, 1, 10},
		{8, 863472675, 5, 7},
		{6, 737005495, 6, 6},
		{13, 140874526, 1, 13},
		{5, 838370030, 1, 5},
		{7987995, 944258007, 3704096, 5378692},
		{20, 452477339, 2, 20},
		{16, 316486845, 3, 15},
		{7, 371704047, 4, 4},
		{10, 847309774, 1, 4},
		{19, 326960619, 13, 5},
		{10, 995691642, 9, 10},
		{7, 116507988, 3, 4},
		{8, 94123457, 3, 3},
		{5, 559772387, 5, 1},
		{8, 68776125, 2, 6},
		{2, 950135853, 2, 2},
		{10, 871101260, 5, 4},
		{7, 202574414, 2, 1},
		{18, 179098809, 5, 1},
		{2, 241943014, 1, 2},
		{796, 906236986, 70, 607},
		{10, 351834097, 7, 3},
		{17, 807384911, 17, 17},
		{8, 315277218, 2, 3},
		{1, 809644535, 1, 1},
		{10, 817801950, 3, 2},
		{5, 440531117, 5, 1},
		{20, 880268919, 8, 6},
		{6, 293435347, 2, 2},
		{18, 19114015, 3, 15},
		{4, 735038152, 3, 2},
		{622, 756206857, 245, 27},
		{7, 482235723, 6, 2},
		{1, 332585626, 1, 1},
		{3, 917360179, 1, 1},
		{7, 382333528, 5, 7},
		{3, 910271929, 2, 2},
		{2, 559295142, 1, 2},
		{6, 852399876, 4, 3},
		{5, 507841274, 3, 1},
		{8, 703690620, 7, 2},
		{2, 731894216, 1, 2},
		{15, 315371646, 13, 3},
		{12, 450649452, 4, 3},
		{7, 100332753, 7, 2},
		{9, 304145150, 8, 3},
		{7, 80202029, 5, 2},
		{1, 269193929, 1, 1},
		{18, 950000152, 5, 8},
		{45900, 625548176, 41768, 18843},
		{9, 980493422, 6, 1},
		{2, 59893403, 2, 2},
		{10, 397424389, 1, 9},
		{20, 659990005, 9, 13},
		{8, 962771014, 1, 6},
		{1, 582734799, 1, 1},
		{1, 962681512, 1, 1},
		{1, 176253776, 1, 1},
		{7, 778510859, 2, 1},
		{9, 182827716, 2, 7},
		{5, 846583622, 2, 3},
		{18, 570581961, 6, 2},
		{17, 446480767, 11, 2},
		{10, 483724534, 6, 9},
		{3, 11307206, 1, 2},
		{7, 584440269, 1, 7},
		{14, 697311573, 8, 14},
		{4, 999357627, 1, 3},
		{17, 199341423, 9, 9},
		{7, 457329882, 2, 3},
		{6, 640291708, 3, 6},
		{10, 879791830, 8, 7},
		{3, 269794978, 3, 3},
		{3, 70223500, 3, 3},
		{8, 29789831, 5, 3},
		{1, 982193421, 1, 1},
		{5, 614503262, 5, 1},
		{2, 511908640, 2, 1},
		{8, 256981399, 7, 5},
		{5, 230221644, 4, 2},
		{6, 131578521, 3, 5},
		{7, 421457224, 1, 6},
		{1, 528381267, 1, 1},
		{4, 296324763, 1, 3},
		{13, 413984801, 9, 4},
		{15, 24726509, 13, 11},
		{3, 258277558, 3, 3},
		{15, 837095618, 13, 5},
		{1, 17894198, 1, 1},
		{93327, 722377177, 12125, 38321},
		{3830347, 568814045, 3368104, 1460445},
		{12, 10766669, 6, 10},
		{8, 117991680, 2, 1},
	}

	for _, tc := range tests {
		output := reuse.CircleDistribution(tc.n, tc.m, tc.s)
		if output != tc.output {
			t.Fatalf("n/m/s %d/%d/%d: get %d, expect %d", tc.n, tc.m, tc.s, output, tc.output)
		}
	}
}

func TestReverseDigits(t *testing.T) {

	tests := []struct {
		input  int
		output int
	}{
		{
			input:  1234,
			output: 4321,
		},
		{
			input:  1230,
			output: 321,
		},
		{
			input:  102,
			output: 201,
		},
	}

	for _, tc := range tests {
		output := reuse.ReverseDigits(tc.input)
		if output != tc.output {
			t.Errorf("get %d, expect %d", output, tc.output)
		}
	}
}
